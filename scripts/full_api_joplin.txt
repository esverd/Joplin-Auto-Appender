URL: https://joplinapp.org/api/references/plugin_api/
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.709
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Joplin Plugin Documentation
Welcome to Joplin Plugin Documentation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/apptype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.604
Truncated: False
Content-Mode: simple
Content:
AppType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
AppType
AppType
Index
Enumeration members
Cli
Desktop
Mobile
Enumeration members
Cli
Cli: =cli
Desktop
Desktop: =desktop
Mobile
Mobile: =mobile
AppType
Cli
Desktop
Mobile
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/contentscripttype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.698
Truncated: False
Content-Mode: simple
Content:
ContentScriptType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ContentScriptType
ContentScriptType
Index
Enumeration members
CodeMirrorPlugin
MarkdownItPlugin
Enumeration members
CodeMirrorPlugin
CodeMirrorPlugin: =codeMirrorPlugin
Registers a new CodeMirror plugin, which should follow the template below.
module.exports = {default:function(context){return{plugin:function(CodeMirror){// ...},codeMirrorResources: [],codeMirrorOptions: {// ...},assets: {// ...}, } } }
Thecontextargument allows communicating with other parts of your plugin (see below).
Thepluginkey is your CodeMirror plugin. This is where you can register new commands with CodeMirror or interact with the CodeMirror instance as needed.
CodeMirror 5 only: ThecodeMirrorResourceskey is an array of CodeMirror resources that will be loaded and attached to the CodeMirror module. These are made up of addons, keymaps, and modes. For example, for a plugin that wants to enable clojure highlighting in code blocks.codeMirrorResourceswould be set to[mode/clojure/clojure]. This field is ignored on mobile and when the desktop beta editor is enabled.
CodeMirror 5 only: ThecodeMirrorOptionskey contains all theCodeMirroroptions that will be set or changed by this plugin. New options can alse be declared viaCodeMirror.defineOption, and then have their value set here. For example, a plugin that enables line numbers would setcodeMirrorOptionsto{lineNumbers: true}.
Using theoptional assetskey you may specifyonlyCSS assets that should be loaded in the rendered HTML document. Check for example the Joplin [Mermaid plugin](https://github.com/laurent22/joplin/blob/dev/packages/renderer/MdToHtml/rules/mermaid.ts) to see how the data should be structured.
One of theplugin,codeMirrorResources, orcodeMirrorOptionskeys must be provided for the plugin to be valid. Having multiple or all provided is also okay.
See also:
Thedemo pluginfor an example of all these keys being used in one plugin.
Seethe editor plugin tutorialfor how to develop a plugin for the mobile editor and the desktop beta markdown editor.
Posting messages from the content script to your plugin
In order to post messages to the plugin, you can use the postMessage function passed to thecontext.
constresponse =awaitcontext.postMessage(messageFromCodeMirrorContentScript);
When you post a message, the plugin can send back aresponsethus allowing two-way communication:
awaitjoplin.contentScripts.onMessage(contentScriptId,(message) ={// Process message returnresponse;// Can be any object, string or number});
SeeJoplinContentScripts.onMessagefor more details, as well as thepostMessage demo.
MarkdownItPlugin
MarkdownItPlugin: =markdownItPlugin
Registers a new Markdown-It plugin, which should follow the template below.
module.exports = {default:function(context){return{plugin:function(markdownIt, pluginOptions){// ...},assets: {// ...}, } } }
Seethe demofor a simple Markdown-it plugin example.
Exported members
Thecontextargument is currently unused but could be used later on to provide access to your own plugin so that the content script and plugin can communicate.
Therequired pluginkey is the actual Markdown-It plugin - check theofficial docfor more information.
Using theoptional assetskey you may specify assets such as JS or CSS that should be loaded in the rendered HTML document. Check for example the Joplin [Mermaid plugin](https://github.com/laurent22/joplin/blob/dev/packages/renderer/MdToHtml/rules/mermaid.ts) to see how the data should be structured.
Supporting the Rich Text Editor
Joplins Rich Text Editor works with rendered HTML, which is converted back to markdown when saving. To prevent the original markdown for your plugin from being lost, Joplin needs additional metadata.
To provide this,
Wrap the HTML generated by your plugin in an element with classjoplin-editable. For example,
div class=joplin-editable...your html.../div
Add a child with classjoplin-sourcethat contains the original markdown that was rendered by your plugin. Includedata-joplin-source-open,data-joplin-source-close, anddata-joplin-languageattributes. For example, if your plugin rendered the following code block,
```foo ... original source here ... ```
then it should render to
div class=joplin-editable pre class=joplin-source data-joplin-language=foo data-joplin-source-open=```fooNewLine; data-joplin-source-close=``` ... original source here .../pre... rendered HTML here .../div
Seethe demofor a complete example.
Getting the settings from the renderer
You can access your plugin settings from the renderer by callingpluginOptions.settingValue(your-setting-key).
Posting messages from the content script to your plugin
The application provides the following function to allow executing commands from the rendered HTML code:
constresponse =awaitwebviewApi.postMessage(contentScriptId, message);
contentScriptIdis the ID youve defined when you registered the content script. You can retrieve it from thecontext.
messagecan be any basic JavaScript type (number, string, plain object), but it cannot be a function or class instance.
When you post a message, the plugin can send back aresponsethus allowing two-way communication:
awaitjoplin.contentScripts.onMessage(contentScriptId,(message) ={// Process message returnresponse;// Can be any object, string or number});
SeeJoplinContentScripts.onMessagefor more details, as well as thepostMessage demo.
Registering an existing Markdown-it plugin
To include a regular Markdown-It plugin, that doesnt make use of any Joplin-specific features, you would simply create a file such as this:
module.exports = {default:function(context){return{plugin:require(markdown-it-toc-done-right); } } }
ContentScriptType
CodeMirrorPlugin
MarkdownItPlugin
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/filesystemitem.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 1.649
Truncated: False
Content-Mode: simple
Content:
FileSystemItem | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
FileSystemItem
FileSystemItem
Index
Enumeration members
Directory
File
Enumeration members
Directory
Directory: =directory
File
File: =file
FileSystemItem
Directory
File
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/importmoduleoutputformat.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 1.537
Truncated: False
Content-Mode: simple
Content:
ImportModuleOutputFormat | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ImportModuleOutputFormat
ImportModuleOutputFormat
Index
Enumeration members
Html
Markdown
Enumeration members
Html
Html: =html
Markdown
Markdown: =md
ImportModuleOutputFormat
Html
Markdown
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/itemchangeeventtype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.599
Truncated: False
Content-Mode: simple
Content:
ItemChangeEventType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ItemChangeEventType
ItemChangeEventType
Index
Enumeration members
Create
Delete
Update
Enumeration members
Create
Create: = 1
Delete
Delete: = 3
Update
Update: = 2
ItemChangeEventType
Create
Delete
Update
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/itemflow.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.602
Truncated: False
Content-Mode: simple
Content:
ItemFlow | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ItemFlow
ItemFlow
Index
Enumeration members
LeftToRight
TopToBottom
Enumeration members
LeftToRight
LeftToRight: =leftToRight
TopToBottom
TopToBottom: =topToBottom
ItemFlow
LeftToRight
TopToBottom
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/menuitemlocation.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.623
Truncated: False
Content-Mode: simple
Content:
MenuItemLocation | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
MenuItemLocation
MenuItemLocation
Index
Enumeration members
Context
Edit
EditorContextMenu
File
FolderContextMenu
Help
Note
NoteListContextMenu
TagContextMenu
Tools
View
Enumeration members
Context
Context: =context
deprecated
Do not use - same as NoteListContextMenu
Edit
Edit: =edit
EditorContextMenu
EditorContextMenu: =editorContextMenu
File
File: =file
FolderContextMenu
FolderContextMenu: =folderContextMenu
When a command is called from a folder context menu, the command will receive the following arguments:
folderId:string: ID of the folder that was right-clicked on
Help
Help: =help
Note
Note: =note
NoteListContextMenu
NoteListContextMenu: =noteListContextMenu
When a command is called from the note list context menu, the command will receive the following arguments:
noteIds:string[]: IDs of the notes that were right-clicked on.
TagContextMenu
TagContextMenu: =tagContextMenu
When a command is called from a tag context menu, the command will receive the following arguments:
tagId:string: ID of the tag that was right-clicked on
Tools
Tools: =tools
View
View: =view
MenuItemLocation
Context
Edit
EditorContextMenu
File
FolderContextMenu
Help
Note
NoteListContextMenu
TagContextMenu
Tools
View
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/modeltype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.376
Truncated: False
Content-Mode: simple
Content:
ModelType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ModelType
ModelType
Index
Enumeration members
Alarm
Command
Folder
ItemChange
MasterKey
Migration
Note
NoteResource
NoteTag
Resource
ResourceLocalState
Revision
Search
Setting
SmartFilter
Tag
Enumeration members
Alarm
Alarm: = 8
Command
Command: = 16
Folder
Folder: = 2
ItemChange
ItemChange: = 10
MasterKey
MasterKey: = 9
Migration
Migration: = 14
Note
Note: = 1
NoteResource
NoteResource: = 11
NoteTag
NoteTag: = 6
Resource
Resource: = 4
ResourceLocalState
ResourceLocalState: = 12
Revision
Revision: = 13
Search
Search: = 7
Setting
Setting: = 3
SmartFilter
SmartFilter: = 15
Tag
Tag: = 5
ModelType
Alarm
Command
Folder
ItemChange
MasterKey
Migration
Note
NoteResource
NoteTag
Resource
ResourceLocalState
Revision
Search
Setting
SmartFilter
Tag
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/settingitemsubtype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.345
Truncated: False
Content-Mode: simple
Content:
SettingItemSubType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SettingItemSubType
SettingItemSubType
Index
Enumeration members
DirectoryPath
FilePath
FilePathAndArgs
Enumeration members
DirectoryPath
DirectoryPath: =directory_path
FilePath
FilePath: =file_path
FilePathAndArgs
FilePathAndArgs: =file_path_and_args
SettingItemSubType
DirectoryPath
FilePath
FilePathAndArgs
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/settingitemtype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.265
Truncated: False
Content-Mode: simple
Content:
SettingItemType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SettingItemType
SettingItemType
Index
Enumeration members
Array
Bool
Button
Int
Object
String
Enumeration members
Array
Array: = 4
Bool
Bool: = 3
Button
Button: = 6
Int
Int: = 1
Object
Object: = 5
String
String: = 2
SettingItemType
Array
Bool
Button
Int
Object
String
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/settingstorage.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.267
Truncated: False
Content-Mode: simple
Content:
SettingStorage | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SettingStorage
SettingStorage
Index
Enumeration members
Database
File
Enumeration members
Database
Database: = 1
File
File: = 2
SettingStorage
Database
File
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/toasttype.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.365
Truncated: False
Content-Mode: simple
Content:
ToastType | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ToastType
ToastType
Index
Enumeration members
Error
Info
Success
Enumeration members
Error
Error: =error
Info
Info: =info
Success
Success: =success
ToastType
Error
Info
Success
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/enums/toolbarbuttonlocation.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.258
Truncated: False
Content-Mode: simple
Content:
ToolbarButtonLocation | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ToolbarButtonLocation
ToolbarButtonLocation
Index
Enumeration members
EditorToolbar
NoteToolbar
Enumeration members
EditorToolbar
EditorToolbar: =editorToolbar
This toolbar is right above the text editor. It applies to the note body only.
NoteToolbar
NoteToolbar: =noteToolbar
This toolbar in the top right corner of the application. It applies to the note as a whole, including its metadata.
desktop
ToolbarButtonLocation
EditorToolbar
NoteToolbar
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplin.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.578
Truncated: False
Content-Mode: simple
Content:
joplin | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin
joplin
This is the main entry point to the Joplin API. You can access various services using the provided accessors.
The API is now relatively stable and in general maintaining backward compatibility is a top priority, so you shouldnt except much breakages.
If a breaking change ever becomes needed, best effort will be done to:
Deprecate features instead of removing them, so as to give you time to fix the issue;
Document breaking changes in the changelog;
So if you are developing a plugin, please keep an eye on the changelog as everything will be in there with information about how to update your code.
Index
Accessors
clipboard
commands
contentScripts
data
imaging
interop
plugins
settings
views
window
workspace
Methods
require
shouldUseDarkColors
versionInfo
Accessors
clipboard
getclipboard():joplin.clipboard
commands
getcommands():joplin.commands
contentScripts
getcontentScripts():joplin.contentScripts
data
getdata():joplin.data
imaging
getimaging():joplin.imaging
interop
getinterop():joplin.interop
plugins
getplugins():joplin.plugins
settings
getsettings():joplin.settings
views
getviews():joplin.views
window
getwindow():joplin.window
workspace
getworkspace():joplin.workspace
Methods
require
require(_path:string):any
It is not possible to bundle native packages with a plugin, because they need to work cross-platforms. Instead access to certain useful native packages is provided using this function.
Currently these packages are available:
sqlite3
fs-extra
View the demo plugin
desktop
Parameters
_path:string
shouldUseDarkColors
shouldUseDarkColors():Promiseboolean
Tells whether the current theme is a dark one or not.
versionInfo
versionInfo():PromiseVersionInfo
joplin
constructor
clipboard
commands
contentScripts
data
imaging
interop
plugins
settings
views
window
workspace
require
shouldUseDarkColors
versionInfo
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinclipboard.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.459
Truncated: False
Content-Mode: simple
Content:
joplin.clipboard | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.clipboard
joplin.clipboard
Index
Methods
availableFormats
readHtml
readImage
readText
write
writeHtml
writeImage
writeText
Methods
availableFormats
availableFormats():Promisestring[]
Returns the list available formats (mime types).
For example [text/plain,text/html]
readHtml
readHtml():Promisestring
desktop
readImage
readImage():Promisestring
Returns the image indata URLformat.
desktop
readText
readText():Promisestring
write
write(content:ClipboardContent):Promisevoid
Writes multiple formats to the clipboard simultaneously. This allows setting both text/plain and text/html at the same time.
desktop
example
awaitjoplin.clipboard.write({text:Plain text version,html:strongHTML version/strong});
Parameters
content:ClipboardContent
writeHtml
writeHtml(html:string):Promisevoid
desktop
Parameters
html:string
writeImage
writeImage(dataUrl:string):Promisevoid
Takes an image indata URLformat.
desktop
Parameters
dataUrl:string
writeText
writeText(text:string):Promisevoid
Parameters
text:string
joplin.clipboard
constructor
availableFormats
readHtml
readImage
readText
write
writeHtml
writeImage
writeText
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplincommands.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.382
Truncated: False
Content-Mode: simple
Content:
joplin.commands | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.commands
joplin.commands
This class allows executing or registering new Joplin commands. Commands can be executed or associated withtoolbar buttonsormenu items.
View the demo plugin
Executing Joplins internal commands
It is also possible to execute internal Joplins commands which, as of now, are not well documented. You can find the list directly on GitHub though at the following locations:
Main screen commands
Global commands
Editor commands
To view what arguments are supported, you can open any of these files and look at theexecute()command.
Note that many of these commands only work on desktop. The more limited list of mobile commands can be found in these places:
Global commands
Note screen commands
Editor commands
Additionally, certain global commands have the same implementation on both platforms:
Shared global commands
Executing editor commands
There might be a situation where you want to invoke editor commands without using acontentScript. For this reason Joplin provides the built ineditor.execCommandcommand.
editor.execCommandshould work with any core command in both theCodeMirrorandTinyMCEeditors, as well as most functions calls directly on a CodeMirror editor object (extensions).
CodeMirror commands
TinyMCE core editor commands
editor.execCommandsupports adding arguments for the commands.
awaitjoplin.commands.execute(editor.execCommand, {name:madeUpCommand,// CodeMirror and TinyMCE args: [],// CodeMirror and TinyMCE ui:false,// TinyMCE only value:,// TinyMCE only});
View the example using the CodeMirror editor
Index
Methods
execute
register
Methods
execute
execute(commandName:string,...args:any[]):Promiseany|void
Executes the given command.
The command can take any number of arguments, and the supported arguments will vary based on the command. For custom commands, this is theargspassed to theexecute()function. For built-in commands, you can find the supported arguments by checking the links above.
// Create a new note in the current notebook: awaitjoplin.commands.execute(newNote);// Create a new sub-notebook under the provided notebook // Note: internally, notebooks are calledfolders. awaitjoplin.commands.execute(newFolder,SOME_FOLDER_ID);
Parameters
commandName:string
Rest ...args:any[]
register
register(command:Command):Promisevoid
Registers a new command.
// Register a new commmand calledtestCommand1 awaitjoplin.commands.register({name:testCommand1,label:My Test Command 1,iconName:fas fa-music,execute:() ={ alert(Testing plugin command 1); }, });
Parameters
command:Command
joplin.commands
constructor
execute
register
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplincontentscripts.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.367
Truncated: False
Content-Mode: simple
Content:
joplin.contentScripts | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.contentScripts
joplin.contentScripts
Index
Methods
onMessage
register
Methods
onMessage
onMessage(contentScriptId:string, callback:any):Promisevoid
Listens to a messages sent from the content script using postMessage(). SeeContentScriptTypefor more information as well as thepostMessage demo
Parameters
contentScriptId:string
callback:any
register
register(type:ContentScriptType, id:string, scriptPath:string):Promisevoid
Registers a new content script. Unlike regular plugin code, which runs in a separate process, content scripts run within the main process code and thus allow improved performances and more customisations in specific cases. It can be used for example to load a Markdown or editor plugin.
Note that registering a content script in itself will do nothing - it will only be loaded in specific cases by the relevant app modules (eg. the Markdown renderer or the code editor). So it is not a way to inject and run arbitrary code in the app, which for safety and performance reasons is not supported.
The plugin generator provides a way to build any content script you might want to package as well as its dependencies. See thePlugin Generator docfor more information.
View the renderer demo plugin
View the editor plugin tutorial
View the legacy editor demo plugin
See also thepostMessage demo
Parameters
type:ContentScriptType
Defines how the script will be used. See the type definition for more information about each supported type.
id:string
A unique ID for the content script.
scriptPath:string
Must be a path relative to the plugin main script. For example, if your file content_script.js is next to your index.ts file, you would setscriptPathto./content_script.js.
joplin.contentScripts
constructor
onMessage
register
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplindata.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.609
Truncated: False
Content-Mode: simple
Content:
joplin.data | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.data
joplin.data
This module provides access to the Joplin data API:https://joplinapp.org/help/api/references/rest_apiThis is the main way to retrieve data, such as notes, notebooks, tags, etc. or to update them or delete them.
This is also what you would use to search notes, via thesearchendpoint.
View the demo plugin
In general you would use the methods in this class as if you were using a REST API. There are four methods that map to GET, POST, PUT and DELETE calls. And each method takes these parameters:
path: This is an array that represents the path to the resource in the form[resourceName,resourceId,resourceLink](eg. [tags,:id,notes]). Theresourcessegment is the name of the resources you want to access (eg.notes,folders, etc.). If not followed by anything, it will refer to all the resources in that collection. The optionalresourceIdpoints to a particular resources within the collection. Finally, an optionallinkcan be present, which links the resource to a collection of resources. This can be used in the API for example to retrieve all the notes associated with a tag.
query: (Optional) The query parameters. In a URL, this is the part after the question mark?. In this case, it should be an object with key/value pairs.
data: (Optional) Applies to PUT and POST calls only. The request body contains the data you want to create or modify, for example the content of a note or folder.
files: (Optional) Used to create new resources and associate them with files.
Please refer to theJoplin API documentationfor complete details about each call. As the plugin runs within the Joplin applicationyou do not need an authorisation tokento use this API.
For example:
// Get a note ID, title and body constnoteId =some_note_id;constnote =awaitjoplin.data.get([notes, noteId], {fields: [id,title,body] });// Get all folders constfolders =awaitjoplin.data.get([folders]);// Set the note body awaitjoplin.data.put([notes, noteId],null, {body:New note body});// Create a new note under one of the folders awaitjoplin.data.post([notes],null, {body:my new note,title:some title,parent_id: folders[0].id });
Index
Methods
delete
get
itemType
post
put
resourcePath
userDataDelete
userDataGet
userDataSet
Methods
delete
delete(path:Path, query?:any):Promiseany
Parameters
path:Path
Default valuequery:any= null
get
get(path:Path, query?:any):Promiseany
Parameters
path:Path
Default valuequery:any= null
itemType
itemType(itemId:string):PromiseModelType
Parameters
itemId:string
post
post(path:Path, query?:any, body?:any, files?:any[]):Promiseany
Parameters
path:Path
Default valuequery:any= null
Default valuebody:any= null
Default valuefiles:any[]= null
put
put(path:Path, query?:any, body?:any, files?:any[]):Promiseany
Parameters
path:Path
Default valuequery:any= null
Default valuebody:any= null
Default valuefiles:any[]= null
resourcePath
resourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
userDataDelete
userDataDelete(itemType:ModelType, itemId:string, key:string):Promisevoid
Deletes a note user data. SeeJoplinData.userDataGetfor more details.
Parameters
itemType:ModelType
itemId:string
key:string
userDataGet
userDataGetT(itemType:ModelType, itemId:string, key:string):PromiseT
Gets an item user data. User data are key/value pairs. Thekeycan be any arbitrary string, while thevaluecan be of any type supported byJSON.stringify
User data is synchronised across devices, and each value wil be merged based on their timestamp:
If value is modified by client 1, then modified by client 2, it will take the value from client 2
If value is modified by client 1, then deleted by client 2, the value will be deleted after merge
If value is deleted by client 1, then updated by client 2, the value will be restored and set to the value from client 2 after merge
Type parameters
T
Parameters
itemType:ModelType
itemId:string
key:string
userDataSet
userDataSetT(itemType:ModelType, itemId:string, key:string, value:T):Promisevoid
Sets a note user data. SeeJoplinData.userDataGetfor more details.
Type parameters
T
Parameters
itemType:ModelType
itemId:string
key:string
value:T
joplin.data
constructor
delete
get
itemType
post
put
resourcePath
userDataDelete
userDataGet
userDataSet
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinimaging.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.575
Truncated: False
Content-Mode: simple
Content:
joplin.imaging | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.imaging
joplin.imaging
Provides imaging functions to resize or process images. You create an image using one of thecreateFromfunctions, then use the other functions to process the image.
Images are associated with a handle which is what will be available to the plugin. Once you are done with an image, free it using thefree()function.
View the example
desktop
Index
Methods
createFromPath
createFromPdfPath
createFromPdfResource
createFromResource
crop
free
getPdfInfoFromPath
getPdfInfoFromResource
getSize
resize
toJpgFile
toJpgResource
toPngFile
toPngResource
Methods
createFromPath
createFromPath(filePath:string):PromiseHandle
Creates an image from the provided path. Note that images and PDFs are supported. If you provide a URL instead of a local path, the file will be downloaded first then converted to an image.
Parameters
filePath:string
createFromPdfPath
createFromPdfPath(path:string, options?:CreateFromPdfOptions):PromiseHandle[]
Parameters
path:string
Optionaloptions:CreateFromPdfOptions
createFromPdfResource
createFromPdfResource(resourceId:string, options?:CreateFromPdfOptions):PromiseHandle[]
Parameters
resourceId:string
Optionaloptions:CreateFromPdfOptions
createFromResource
createFromResource(resourceId:string):PromiseHandle
Parameters
resourceId:string
crop
crop(handle:Handle, rectangle:Rectangle):Promisestring
Parameters
handle:Handle
rectangle:Rectangle
free
free(handles:Handle[]|Handle):Promisevoid
Image data is not automatically deleted by Joplin so make sure you call this method on the handle once you are done.
Parameters
handles:Handle[]|Handle
getPdfInfoFromPath
getPdfInfoFromPath(path:string):PromisePdfInfo
Parameters
path:string
getPdfInfoFromResource
getPdfInfoFromResource(resourceId:string):PromisePdfInfo
Parameters
resourceId:string
getSize
getSize(handle:Handle):Promiseany
Parameters
handle:Handle
resize
resize(handle:Handle, options?:ResizeOptions):Promisestring
Parameters
handle:Handle
Default valueoptions:ResizeOptions= null
toJpgFile
toJpgFile(handle:Handle, filePath:string, quality?:number):Promisevoid
Quality is between 0 and 100
Parameters
handle:Handle
filePath:string
Default valuequality:number= 80
toJpgResource
toJpgResource(handle:Handle, resourceProps:any, quality?:number):PromiseResourceEntity
Creates a new Joplin resource from the image data. The image will be first converted to a JPEG.
Parameters
handle:Handle
resourceProps:any
Default valuequality:number= 80
toPngFile
toPngFile(handle:Handle, filePath:string):Promisevoid
Parameters
handle:Handle
filePath:string
toPngResource
toPngResource(handle:Handle, resourceProps:any):PromiseResourceEntity
Creates a new Joplin resource from the image data. The image will be first converted to a PNG.
Parameters
handle:Handle
resourceProps:any
joplin.imaging
constructor
createFromPath
createFromPdfPath
createFromPdfResource
createFromResource
crop
free
getPdfInfoFromPath
getPdfInfoFromResource
getSize
resize
toJpgFile
toJpgResource
toPngFile
toPngResource
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplininterop.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.355
Truncated: False
Content-Mode: simple
Content:
joplin.interop | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.interop
joplin.interop
Provides a way to create modules to import external data into Joplin or to export notes into any arbitrary format.
View the demo plugin
To implement an import or export module, you would simply define an object with various event handlers that are called by the application during the import/export process.
See the documentation of theExportModuleandImportModulefor more information.
You may also want to refer to the Joplin API documentation to see the list of properties for each item (note, notebook, etc.) -https://joplinapp.org/help/api/references/rest_api
desktop: While it is possible to register import and export modules on mobile, there is no GUI to activate them.
Index
Methods
registerExportModule
registerImportModule
Methods
registerExportModule
registerExportModule(module:ExportModule):Promisevoid
Parameters
module:ExportModule
registerImportModule
registerImportModule(module:ImportModule):Promisevoid
Parameters
module:ImportModule
joplin.interop
registerExportModule
registerImportModule
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinplugins.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.451
Truncated: False
Content-Mode: simple
Content:
joplin.plugins | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.plugins
joplin.plugins
This class provides access to plugin-related features.
Index
Methods
dataDir
installationDir
register
registerContentScript
require
Methods
dataDir
dataDir():Promisestring
Gets the plugin own data directory path. Use this to store any plugin-related data. UnlikeinstallationDir, any data stored here will be persisted.
installationDir
installationDir():Promisestring
Gets the plugin installation directory. This can be used to access any asset that was packaged with the plugin. This directory should be considered read-only because any data you store here might be deleted or re-created at any time. To store new persistent data, usedataDir.
register
register(script:Script):Promisevoid
Registers a new plugin. This is the entry point when creating a plugin. You should pass a simple object with anonStartmethod to it. ThatonStartmethod will be executed as soon as the plugin is loaded.
joplin.plugins.register({onStart:async function(){// Run your plugin code here} });
Parameters
script:Script
registerContentScript
registerContentScript(type:ContentScriptType, id:string, scriptPath:string):Promisevoid
deprecated
Use joplin.contentScripts.register()
Parameters
type:ContentScriptType
id:string
scriptPath:string
require
require(_path:string):any
deprecated
Use joplin.require()
Parameters
_path:string
joplin.plugins
constructor
dataDir
installationDir
register
registerContentScript
require
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinsettings.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.583
Truncated: False
Content-Mode: simple
Content:
joplin.settings | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.settings
joplin.settings
This API allows registering new settings and setting sections, as well as getting and setting settings. Once a setting has been registered it will appear in the config screen and be editable by the user.
Settings are essentially key/value pairs.
Note: Currently this API doesnotprovide access to Joplins built-in settings. This is by design as plugins that modify user settings could give unexpected results
View the demo plugin
Index
Methods
globalValue
globalValues
onChange
registerSection
registerSetting
registerSettings
setValue
value
values
Methods
globalValue
globalValue(key:string):Promiseany
deprecated
Use joplin.settings.globalValues()
Parameters
key:string
globalValues
globalValues(keys:string[]):Promiseany[]
Gets global setting values, including app-specific settings and those set by other plugins.
The list of available settings is not documented yet, but can be found by looking at the source code:
https://github.com/laurent22/joplin/blob/dev/packages/lib/models/settings/builtInMetadata.ts
Parameters
keys:string[]
onChange
onChange(handler:ChangeHandler):Promisevoid
Called when one or multiple settings of your plugin have been changed.
For performance reasons, this event is triggered with a delay.
You will only get events for your own plugin settings.
Parameters
handler:ChangeHandler
registerSection
registerSection(name:string, section:SettingSection):Promisevoid
Registers a new setting section. Like for registerSetting, it is dynamic and needs to be done every time the plugin starts.
Parameters
name:string
section:SettingSection
registerSetting
registerSetting(key:string, settingItem:SettingItem):Promisevoid
deprecated
Use joplin.settings.registerSettings()
Registers a new setting.
Parameters
key:string
settingItem:SettingItem
registerSettings
registerSettings(settings:Recordstring,SettingItem):Promisevoid
Registers new settings. Note that registering a setting item is dynamic and will be gone next time Joplin starts. What it means is that you need to register the setting every time the plugin starts (for example in the onStart event). The setting value however will be preserved from one launch to the next so there is no risk that it will be lost even if for some reason the plugin fails to start at some point.
Parameters
settings:Recordstring,SettingItem
setValue
setValue(key:string, value:any):Promisevoid
Sets a setting value (only applies to setting you registered from your plugin)
Parameters
key:string
value:any
value
value(key:string):Promiseany
Gets a setting value (only applies to setting you registered from your plugin).
Note: If you want to retrieve all your plugin settings, for example when the plugin starts, it is recommended to use thevalues()function instead - it will be much faster than callingvalue()multiple times.
Parameters
key:string
values
values(keys:string[]|string):PromiseRecordstring,unknown
Gets setting values (only applies to setting you registered from your plugin)
Parameters
keys:string[]|string
joplin.settings
constructor
globalValue
globalValues
onChange
registerSection
registerSetting
registerSettings
setValue
value
values
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviews.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
joplin.views | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views
joplin.views
This namespace provides access to view-related services.
Creating a view
All view services provide acreate()method which you would use to create the view object, whether its a dialog, a toolbar button or a menu item. In some cases, thecreate()method will return aViewHandle, which you would use to act on the view, for example to set certain properties or call some methods.
ThewebviewApiobject
Within a view, you can use the global objectwebviewApifor various utility functions, such as sending messages or displaying context menu. Refer toWebviewApifor the full documentation.
Index
Accessors
dialogs
editors
menuItems
menus
noteList
panels
toolbarButtons
Accessors
dialogs
getdialogs():joplin.views.dialogs
editors
geteditors():joplin.views.editors
menuItems
getmenuItems():joplin.views.menuItems
menus
getmenus():joplin.views.menus
noteList
getnoteList():joplin.views.noteList
panels
getpanels():joplin.views.panels
toolbarButtons
gettoolbarButtons():joplin.views.toolbarButtons
joplin.views
constructor
dialogs
editors
menuItems
menus
noteList
panels
toolbarButtons
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewsdialogs.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.478
Truncated: False
Content-Mode: simple
Content:
joplin.views.dialogs | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.dialogs
joplin.views.dialogs
Allows creating and managing dialogs. A dialog is modal window that contains a webview and a row of buttons. You can update the webview using thesetHtmlmethod. Dialogs are hidden by default and you need to callopen()to open them. Once the user clicks on a button, theopencall will return an object indicating what button was clicked on.
Retrieving form values
If your HTML content included one or more forms, aformDataobject will also be included with the key/value for each form.
Special button IDs
The following buttons IDs have a special meaning:
ok,yes,submit,confirm: They are consideredsubmitbuttons
cancel,no,reject: They are considereddismissbuttons
This information is used by the application to determine what action should be done when the user pressesEnterorEscapewithin the dialog. If they pressEnter, the firstsubmitbutton will be automatically clicked. If they pressEscapethe firstdismissbutton will be automatically clicked.
View the demo plugin
Index
Methods
addScript
create
open
setButtons
setFitToContent
setHtml
showMessageBox
showOpenDialog
showToast
Methods
addScript
addScript(handle:ViewHandle, scriptPath:string):Promisevoid
Adds and loads a new JS or CSS files into the dialog.
Parameters
handle:ViewHandle
scriptPath:string
create
create(id:string):PromiseViewHandle
Creates a new dialog
Parameters
id:string
open
open(handle:ViewHandle):PromiseDialogResult
Opens the dialog.
On desktop, this closes any copies of the dialog open in different windows.
Parameters
handle:ViewHandle
setButtons
setButtons(handle:ViewHandle, buttons:ButtonSpec[]):PromiseButtonSpec[]
Sets the dialog buttons.
Parameters
handle:ViewHandle
buttons:ButtonSpec[]
setFitToContent
setFitToContent(handle:ViewHandle, status:boolean):Promiseboolean
Toggle on whether to fit the dialog size to the content or not. When set to false, the dialog is set to 90vw and 80vh
default
true
Parameters
handle:ViewHandle
status:boolean
setHtml
setHtml(handle:ViewHandle, html:string):Promisestring
Sets the dialog HTML content
Parameters
handle:ViewHandle
html:string
showMessageBox
showMessageBox(message:string):Promisenumber
Displays a message box with OK/Cancel buttons. Returns the button index that was clicked -0for OK and1forCancel
Parameters
message:string
showOpenDialog
showOpenDialog(options:any):Promiseany
Displays a dialog to select a file or a directory. Same options and output ashttps://www.electronjs.org/docs/latest/api/dialog#dialogshowopendialogbrowserwindow-options
desktop
Parameters
options:any
showToast
showToast(toast:Toast):Promisevoid
Displays a Toast notification in the corner of the application screen.
Parameters
toast:Toast
joplin.views.dialogs
constructor
addScript
create
open
setButtons
setFitToContent
setHtml
showMessageBox
showOpenDialog
showToast
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewseditors.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.503
Truncated: False
Content-Mode: simple
Content:
joplin.views.editors | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.editors
joplin.views.editors
Allows creating alternative note editors. You can create a view to handle loading and saving the note, and do your own rendering.
Although it may be used to implement an alternative text editor, the more common use case may be to render the note in a different, graphical way - for example displaying a graph, and saving/loading the graph data in the associated note. In that case, you would detect whether the current note contains graph data and, in this case, youd display your viewer.
Terminology: An editor isactivewhen it can be used to edit the current note. Note that it doesnt necessarily mean that your editor is visible - it just means that the user has the option to switch to it (via thetoggle editorbutton). Avisibleeditor is active and is currently being displayed.
To implement an editor you need to listen to two events:
onActivationCheck: This is a way for the app to know whether your editor should be active or not. Returntruefrom this handler to activate your editor.
onUpdate: When this is called you should update your editor based on the current note content. Calljoplin.workspace.selectedNote()to get the current note.
showEditorPluginandtoggleEditorPlugincommands. Additionally you can use these commands to display your editor viajoplin.commands.execute(showEditorPlugin). This is not always necessary since the user can switch to your editor using thetoggle editorbutton, however you may want to programmatically display the editor in some cases - for example when creating a new note specific to your editor.
Note that only one editor view can be active at a time. This is why it is important not to activate your view if its not relevant to the current note. If more than one is active, it is undefined which editor is going to be used to display the note.
For an example of editor plugin, see theYesYouKan plugin. In particular, check the logic aroundonActivationCheckandonUpdatesince this is the entry points for using this API.
Index
Methods
addScript
create
isActive
isVisible
onActivationCheck
onMessage
onUpdate
postMessage
register
saveNote
setHtml
Methods
addScript
addScript(handle:ViewHandle, scriptPath:string):Promisevoid
Adds and loads a new JS or CSS file into the panel.
Parameters
handle:ViewHandle
scriptPath:string
create
create(id:string):PromiseViewHandle
Creates a new editor view
deprecated
Parameters
id:string
isActive
isActive(handle:ViewHandle):Promiseboolean
Tells whether the editor is active or not.
Parameters
handle:ViewHandle
isVisible
isVisible(handle:ViewHandle):Promiseboolean
Tells whether the editor is effectively visible or not. If the editor is inactive, this will returnfalse. If the editor is active and the user has switched to it, it will returntrue. Otherwise it will returnfalse.
Parameters
handle:ViewHandle
onActivationCheck
onActivationCheck(handle:ViewHandle, callback:ActivationCheckCallback):Promisevoid
Emitted when the editor can potentially be activated - this is for example when the current note is changed, or when the application is opened. At that point you should check the current note and decide whether your editor should be activated or not. If it should, returntrue, otherwise returnfalse.
deprecated
onActivationCheckshould be provided when the editor is first created witheditor.register.
Parameters
handle:ViewHandle
callback:ActivationCheckCallback
onMessage
onMessage(handle:ViewHandle, callback:Function):Promisevoid
See [[JoplinViewPanels]]
Parameters
handle:ViewHandle
callback:Function
onUpdate
onUpdate(handle:ViewHandle, callback:UpdateCallback):Promisevoid
Emitted when your editor content should be updated. This is for example when the currently selected note changes, or when the user makes the editor visible.
Parameters
handle:ViewHandle
callback:UpdateCallback
postMessage
postMessage(handle:ViewHandle, message:any):void
See [[JoplinViewPanels]]
Parameters
handle:ViewHandle
message:any
register
register(viewId:string, callbacks:EditorPluginCallbacks):Promisevoid
Registers a new editor plugin. Joplin will call the provided callback to create new editor views associated with the plugin as necessary (e.g. when a new editor is created in a new window).
Parameters
viewId:string
callbacks:EditorPluginCallbacks
saveNote
saveNote(handle:ViewHandle, props:SaveNoteOptions):Promisevoid
Saves the content of the editor, without callingonUpdatefor editors in the same window.
Parameters
handle:ViewHandle
props:SaveNoteOptions
setHtml
setHtml(handle:ViewHandle, html:string):Promisestring
Sets the editor HTML content
Parameters
handle:ViewHandle
html:string
joplin.views.editors
constructor
addScript
create
isActive
isVisible
onActivationCheck
onMessage
onUpdate
postMessage
register
saveNote
setHtml
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewsmenuitems.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.351
Truncated: False
Content-Mode: simple
Content:
joplin.views.menuItems | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.menuItems
joplin.views.menuItems
Allows creating and managing menu items.
View the demo plugin
desktop
Index
Methods
create
Methods
create
create(id:string, commandName:string, location?:MenuItemLocation, options?:CreateMenuItemOptions):Promisevoid
Creates a new menu item and associate it with the given command. You can specify under which menu the item should appear using thelocationparameter.
Parameters
id:string
commandName:string
Default valuelocation:MenuItemLocation= MenuItemLocation.Tools
Default valueoptions:CreateMenuItemOptions= null
joplin.views.menuItems
constructor
create
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewsmenus.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.458
Truncated: False
Content-Mode: simple
Content:
joplin.views.menus | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.menus
joplin.views.menus
Allows creating menus.
View the demo plugin
desktop
Index
Methods
create
Methods
create
create(id:string, label:string, menuItems:MenuItem[], location?:MenuItemLocation):Promisevoid
Creates a new menu from the provided menu items and place it at the given location. As of now, it is only possible to place the menu as a sub-menu of the application build-in menus.
Parameters
id:string
label:string
menuItems:MenuItem[]
Default valuelocation:MenuItemLocation= MenuItemLocation.Tools
joplin.views.menus
constructor
create
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewsnotelist.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.351
Truncated: False
Content-Mode: simple
Content:
joplin.views.noteList | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.noteList
joplin.views.noteList
This API allows you to customise how each note in the note list is rendered. The renderer you implement follows a unidirectional data flow.
The app provides the required dependencies whenever a note is updated - you process these dependencies, and return some props, which are then passed to your template and rendered. SeeListRendererfor a detailed description of each property of the renderer.
Reference
View the demo plugin
Default simple renderer
Default detailed renderer
Screenshots:
Top to bottom with title, date and body
Left to right with thumbnails
Top to bottom with editable title
desktop
Index
Methods
registerRenderer
Methods
registerRenderer
registerRenderer(renderer:ListRenderer):Promisevoid
Parameters
renderer:ListRenderer
joplin.views.noteList
constructor
registerRenderer
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewspanels.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.573
Truncated: False
Content-Mode: simple
Content:
joplin.views.panels | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.panels
joplin.views.panels
Allows creating and managing view panels. View panels allow displaying any HTML content (within a webview) and updating it in real-time. For example it could be used to display a table of content for the active note, or display various metadata or graph.
On desktop, view panels currently are displayed at the right of the sidebar, though can be moved withView Change application layout.
On mobile, view panels are shown in a tabbed dialog that can be opened using a toolbar button.
View the demo plugin
Index
Methods
addScript
create
hide
isActive
onMessage
postMessage
setHtml
show
visible
Methods
addScript
addScript(handle:ViewHandle, scriptPath:string):Promisevoid
Adds and loads a new JS or CSS files into the panel.
Parameters
handle:ViewHandle
scriptPath:string
create
create(id:string):PromiseViewHandle
Creates a new panel
Parameters
id:string
hide
hide(handle:ViewHandle):Promisevoid
Hides the panel
Parameters
handle:ViewHandle
isActive
isActive(handle:ViewHandle):Promiseboolean
Assuming that the current panel is an editor plugin view, returns whether the editor plugin view supports editing the current note.
Parameters
handle:ViewHandle
onMessage
onMessage(handle:ViewHandle, callback:Function):Promisevoid
Called when a message is sent from the webview (using postMessage).
To post a message from the webview to the plugin use:
constresponse =awaitwebviewApi.postMessage(message);
messagecan be any JavaScript object, string or number
responseis whatever was returned by theonMessagehandler
Using this mechanism, you can have two-way communication between the plugin and webview.
See thepostMessage demofor more details.
Parameters
handle:ViewHandle
callback:Function
postMessage
postMessage(handle:ViewHandle, message:any):void
Sends a message to the webview.
The webview must have registered a message handler prior, otherwise the message is ignored. Use;
webviewApi.onMessage((message) ={ ... });
messagecan be any JavaScript object, string or number
The view API may have only one onMessage handler defined. This method is fire and forget so no response is returned.
It is particularly useful when the webview needs to react to events emitted by the plugin or the joplin api.
Parameters
handle:ViewHandle
message:any
setHtml
setHtml(handle:ViewHandle, html:string):Promisestring
Sets the panel webview HTML
Parameters
handle:ViewHandle
html:string
show
show(handle:ViewHandle, show?:boolean):Promisevoid
Shows the panel
Parameters
handle:ViewHandle
Default valueshow:boolean= true
visible
visible(handle:ViewHandle):Promiseboolean
Tells whether the panel is visible or not
Parameters
handle:ViewHandle
joplin.views.panels
constructor
addScript
create
hide
isActive
onMessage
postMessage
setHtml
show
visible
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinviewstoolbarbuttons.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.435
Truncated: False
Content-Mode: simple
Content:
joplin.views.toolbarButtons | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.views.toolbarButtons
joplin.views.toolbarButtons
Allows creating and managing toolbar buttons.
View the demo plugin
Index
Methods
create
Methods
create
create(id:string, commandName:string, location:ToolbarButtonLocation):Promisevoid
Creates a new toolbar button and associate it with the given command.
Parameters
id:string
commandName:string
location:ToolbarButtonLocation
joplin.views.toolbarButtons
constructor
create
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinwindow.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.446
Truncated: False
Content-Mode: simple
Content:
joplin.window | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.window
joplin.window
Index
Methods
loadChromeCssFile
loadNoteCssFile
Methods
loadChromeCssFile
loadChromeCssFile(filePath:string):Promisevoid
Loads a chrome CSS file. It will apply to the window UI elements, except for the note viewer. It is the same as theCustom stylesheet for Joplin-wide app stylessetting. See theLoad CSS Demofor an example.
desktop
Parameters
filePath:string
loadNoteCssFile
loadNoteCssFile(filePath:string):Promisevoid
Loads a note CSS file. It will apply to the note viewer, as well as any exported or printed note. It is the same as theCustom stylesheet for rendered Markdownsetting. See theLoad CSS Demofor an example.
desktop
Parameters
filePath:string
joplin.window
constructor
loadChromeCssFile
loadNoteCssFile
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/classes/joplinworkspace.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.6
Truncated: False
Content-Mode: simple
Content:
joplin.workspace | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
joplin.workspace
joplin.workspace
The workspace service provides access to all the parts of Joplin that are being worked on - i.e. the currently selected notes or notebooks as well as various related events, such as when a new note is selected, or when the note content changes.
View the demo plugin
Index
Methods
filterEditorContextMenu
onNoteAlarmTrigger
onNoteChange
onNoteContentChange
onNoteSelectionChange
onResourceChange
onSyncComplete
onSyncStart
selectedFolder
selectedNote
selectedNoteHash
selectedNoteIds
Methods
filterEditorContextMenu
filterEditorContextMenu(handler:FilterHandlerEditContextMenuFilterObject):void
Called just before the editor context menu is about to open. Allows adding items to it.
desktop
Parameters
handler:FilterHandlerEditContextMenuFilterObject
onNoteAlarmTrigger
onNoteAlarmTrigger(handler:WorkspaceEventHandlerNoteAlarmTriggerEvent):PromiseDisposable
Called when an alarm associated with a to-do is triggered.
Parameters
handler:WorkspaceEventHandlerNoteAlarmTriggerEvent
onNoteChange
onNoteChange(handler:ItemChangeHandler):PromiseDisposable
Called when the content of the current note changes.
Parameters
handler:ItemChangeHandler
onNoteContentChange
onNoteContentChange(callback:WorkspaceEventHandlerNoteContentChangeEvent):Promisevoid
Called when the content of a note changes.
deprecated
UseonNoteChange()instead, which is reliably triggered whenever the note content, or any note property changes.
Parameters
callback:WorkspaceEventHandlerNoteContentChangeEvent
onNoteSelectionChange
onNoteSelectionChange(callback:WorkspaceEventHandlerNoteSelectionChangeEvent):PromiseDisposable
Called when a new note or notes are selected.
Parameters
callback:WorkspaceEventHandlerNoteSelectionChangeEvent
onResourceChange
onResourceChange(handler:ResourceChangeHandler):Promisevoid
Called when a resource is changed. Currently this handled will not be called when a resource is added or deleted.
Parameters
handler:ResourceChangeHandler
onSyncComplete
onSyncComplete(callback:WorkspaceEventHandlerSyncCompleteEvent):PromiseDisposable
Called when the synchronisation process has finished.
Parameters
callback:WorkspaceEventHandlerSyncCompleteEvent
onSyncStart
onSyncStart(handler:SyncStartHandler):PromiseDisposable
Called when the synchronisation process is starting.
Parameters
handler:SyncStartHandler
selectedFolder
selectedFolder():PromiseFolderEntity
Gets the currently selected folder. In some cases, for example during search or when viewing a tag, no folder is actually selected in the user interface. In that case, that function would return the last selected folder.
selectedNote
selectedNote():Promiseany
Gets the currently selected note. Will benullif no note is selected.
On desktop, this returns the selected note in the focused window.
selectedNoteHash
selectedNoteHash():Promisestring
Gets the last hash (note section ID) from cross-note link targeting specific section. New hash is available afteronNoteSelectionChange()is triggered. Example of cross-note link wherehello-worldis a hash:Other Note Title. Method returns empty value when a note was navigated with method other than cross-note link containing valid hash.
selectedNoteIds
selectedNoteIds():Promisestring[]
Gets the IDs of the selected notes (can be zero, one, or many). Use the data API to retrieve information about these notes.
joplin.workspace
constructor
filterEditorContextMenu
onNoteAlarmTrigger
onNoteChange
onNoteContentChange
onNoteSelectionChange
onResourceChange
onSyncComplete
onSyncStart
selectedFolder
selectedNote
selectedNoteHash
selectedNoteIds
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/activationcheckevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.432
Truncated: False
Content-Mode: simple
Content:
ActivationCheckEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ActivationCheckEvent
ActivationCheckEvent
Index
Properties
handle
noteId
Properties
handle
handle: ViewHandle
noteId
noteId: string
ActivationCheckEvent
handle
noteId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/buttonspec.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.515
Truncated: False
Content-Mode: simple
Content:
ButtonSpec | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ButtonSpec
ButtonSpec
Index
Properties
id
title
Methods
onClick
Properties
id
id: ButtonId
Optionaltitle
title: string
Methods
OptionalonClick
onClick():void
ButtonSpec
id
title
onClick
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/changeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.435
Truncated: False
Content-Mode: simple
Content:
ChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ChangeEvent
ChangeEvent
Index
Properties
keys
Properties
keys
keys: string[]
Setting keys that have been changed
ChangeEvent
keys
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/clipboardcontent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.323
Truncated: False
Content-Mode: simple
Content:
ClipboardContent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ClipboardContent
ClipboardContent
Represents content that can be written to the clipboard in multiple formats.
Index
Properties
html
image
text
Properties
Optionalhtml
html: string
HTML representation of the content
Optionalimage
image: string
Image indata URLformat
Optionaltext
text: string
Plain text representation of the content
ClipboardContent
html
image
text
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/codemirrorcontrol.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.467
Truncated: False
Content-Mode: simple
Content:
CodeMirrorControl | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
CodeMirrorControl
CodeMirrorControl
Index
Properties
cm6
editor
joplinExtensions
Methods
addExtension
execCommand
registerCommand
supportsCommand
Properties
cm6
cm6: any
editor
editor: any
Points to a CodeMirror 6 EditorView instance.
joplinExtensions
joplinExtensions: {enableLanguageDataAutocomplete:{of:(enabled:boolean)= any};noteIdFacet:any;setNoteIdEffect:any;completionSource:any}
Type declaration
enableLanguageDataAutocomplete:{of:(enabled:boolean)= any}
Creates an extension that enables or disableslanguageData-based autocompletion.
of:(enabled:boolean)= any
(enabled:boolean):any
Parameters
enabled:boolean
noteIdFacet:any
A CodeMirrorfacetthat contains the ID of the note currently open in the editor.
Access the value of this facet using
constnoteIdFacet = editorControl.joplinExtensions.noteIdFacet;consteditorState = editorControl.editor.state;constnoteId = editorState.facet(noteIdFacet);
setNoteIdEffect:any
A CodeMirrorStateEffectthat is included in aTransactionwhen the note ID changes.
completionSource:function
completionSource(completionSource:any):any
Returns aCodeMirror 6 extensionthat registers the givenCompletionSource.
Use this extension rather than the built-in CodeMirrorautocompletionif you dont want to uselanguageData-based autocompletion.
Usingautocompletion({ override: [ ... ]})causes errors when done by multiple plugins.
Parameters
completionSource:any
Methods
addExtension
addExtension(extension:any|any[]):void
extensionshould be aCodeMirror 6 extension.
Parameters
extension:any|any[]
execCommand
execCommand(name:string,...args:any[]):any
Parameters
name:string
Rest ...args:any[]
registerCommand
registerCommand(name:string, callback:EditorCommandCallback):void
Parameters
name:string
callback:EditorCommandCallback
supportsCommand
supportsCommand(name:string):boolean
Parameters
name:string
CodeMirrorControl
cm6
editor
joplinExtensions
addExtension
execCommand
registerCommand
supportsCommand
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/command.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.469
Truncated: False
Content-Mode: simple
Content:
Command | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Command
Command
Index
Properties
enabledCondition
iconName
label
name
Methods
execute
Properties
OptionalenabledCondition
enabledCondition: string
Defines whether the command should be enabled or disabled, which in turns affects the enabled state of any associated button or menu item.
The condition should be expressed as awhen-clause(as in Visual Studio Code). Its a simple boolean expression that evaluates totrueorfalse. It supports the following operators:
Operator
Symbol
Example
Equality
==
editorType == markdown
Inequality
!=
currentScreen != config
Or
||
noteIsTodo || noteTodoCompleted
And
oneNoteSelected!inConflictFolder
Joplin, unlike VSCode, also supports parentheses, which allows creating more complex expressions such ascond1 || (cond2cond3). Only one level of parentheses is possible (nested ones arent supported).
Currently the supported context variables arent documented, but you can find the list below:
Global When Clauses
Desktop app When Clauses
Note: Commands are enabled by default unless you use this property.
OptionaliconName
iconName: string
Icon to be used on toolbar buttons for example
Optionallabel
label: string
Label to be displayed on menu items or keyboard shortcut editor for example. If it is missing, its assumed its a private command, to be called programmatically only. In that case the command will not appear in the shortcut editor or command panel, and logically should not be used as a menu item.
name
name: string
Name of command - must be globally unique
Methods
execute
execute(...args:any[]):Promiseany|void
Code to be ran when the command is executed. It may return a result.
Parameters
Rest ...args:any[]
Command
enabledCondition
iconName
label
name
execute
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/contentscriptcontext.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.337
Truncated: False
Content-Mode: simple
Content:
ContentScriptContext | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ContentScriptContext
ContentScriptContext
When a content script is initialised, it receives acontextobject.
Index
Properties
contentScriptId
pluginId
postMessage
Properties
contentScriptId
contentScriptId: string
The content script ID, which may be necessary to post messages
pluginId
pluginId: string
The plugin ID that registered this content script
postMessage
postMessage: PostMessageHandler
Can be used by CodeMirror content scripts to post a message to the plugin
ContentScriptContext
contentScriptId
pluginId
postMessage
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/contentscriptmodule.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.347
Truncated: False
Content-Mode: simple
Content:
ContentScriptModule | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ContentScriptModule
ContentScriptModule
Index
Properties
assets
onLoaded
plugin
Properties
Optionalassets
assets: ()= void
Type declaration
():void
OptionalonLoaded
onLoaded: (event:ContentScriptModuleLoadedEvent)= void
Type declaration
(event:ContentScriptModuleLoadedEvent):void
Parameters
event:ContentScriptModuleLoadedEvent
plugin
plugin: ()= any
Type declaration
():any
ContentScriptModule
assets
onLoaded
plugin
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/contentscriptmoduleloadedevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.448
Truncated: False
Content-Mode: simple
Content:
ContentScriptModuleLoadedEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ContentScriptModuleLoadedEvent
ContentScriptModuleLoadedEvent
Index
Properties
userData
Properties
OptionaluserData
userData: any
ContentScriptModuleLoadedEvent
userData
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/createfrombufferoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.459
Truncated: False
Content-Mode: simple
Content:
CreateFromBufferOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
CreateFromBufferOptions
CreateFromBufferOptions
Index
Properties
height
scaleFactor
width
Properties
Optionalheight
height: number
OptionalscaleFactor
scaleFactor: number
Optionalwidth
width: number
CreateFromBufferOptions
height
scaleFactor
width
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/createfrompdfoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
CreateFromPdfOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
CreateFromPdfOptions
CreateFromPdfOptions
Index
Properties
maxPage
minPage
scaleFactor
Properties
OptionalmaxPage
maxPage: number
The number of the last page to convert. Defaults to the last page if not given.
IfmaxPageis greater than the number of pages in the PDF, all pages in the PDF will be converted to images.
OptionalminPage
minPage: number
The first page to export. Defaults to1, the first page in the document.
OptionalscaleFactor
scaleFactor: number
CreateFromPdfOptions
maxPage
minPage
scaleFactor
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/createmenuitemoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.336
Truncated: False
Content-Mode: simple
Content:
CreateMenuItemOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
CreateMenuItemOptions
CreateMenuItemOptions
Index
Properties
accelerator
Properties
accelerator
accelerator: string
CreateMenuItemOptions
accelerator
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/dialogresult.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.462
Truncated: False
Content-Mode: simple
Content:
DialogResult | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
DialogResult
DialogResult
Index
Properties
formData
id
Properties
OptionalformData
formData: any
id
id: ButtonId
DialogResult
formData
id
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/disposable.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
Disposable | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Disposable
Disposable
Disposable
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/editcontextmenufilterobject.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.36
Truncated: False
Content-Mode: simple
Content:
EditContextMenuFilterObject | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
EditContextMenuFilterObject
EditContextMenuFilterObject
Index
Properties
items
Properties
items
items: MenuItem[]
EditContextMenuFilterObject
items
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/editoractivationcheckfilterobject.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.623
Truncated: False
Content-Mode: simple
Content:
EditorActivationCheckFilterObject | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
EditorActivationCheckFilterObject
EditorActivationCheckFilterObject
Index
Properties
activatedEditors
effectiveNoteId
windowId
Properties
activatedEditors
activatedEditors: {isActive:boolean;pluginId:string;viewId:string}[]
effectiveNoteId
effectiveNoteId: string
windowId
windowId: string
EditorActivationCheckFilterObject
activatedEditors
effectiveNoteId
windowId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/editorcommand.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.343
Truncated: False
Content-Mode: simple
Content:
EditorCommand | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
EditorCommand
EditorCommand
Index
Properties
name
value
Properties
name
name: string
Optionalvalue
value: any
EditorCommand
name
value
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/editorplugincallbacks.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.582
Truncated: False
Content-Mode: simple
Content:
EditorPluginCallbacks | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
EditorPluginCallbacks
EditorPluginCallbacks
Required callbacks for creating an editor plugin.
Index
Properties
onActivationCheck
onSetup
Properties
onActivationCheck
onActivationCheck: ActivationCheckCallback
Emitted when the editor can potentially be activated - this is for example when the current note is changed, or when the application is opened. At that point you should check the current note and decide whether your editor should be activated or not. If it should, returntrue, otherwise returnfalse.
onSetup
onSetup: (handle:ViewHandle)= Promisevoid
Emitted when an editor view is created. This happens, for example, when a new window containing a new editor is created.
This callback should set the editor plugins HTML usingeditors.setHtml, add scripts to the editor witheditors.addScript, and optionally listen for external changes usingeditors.onUpdate.
Type declaration
(handle:ViewHandle):Promisevoid
Parameters
handle:ViewHandle
EditorPluginCallbacks
onActivationCheck
onSetup
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/editorupdateevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.465
Truncated: False
Content-Mode: simple
Content:
EditorUpdateEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
EditorUpdateEvent
EditorUpdateEvent
Index
Properties
newBody
noteId
Properties
newBody
newBody: string
noteId
noteId: string
EditorUpdateEvent
newBody
noteId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/exportcontext.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.462
Truncated: False
Content-Mode: simple
Content:
ExportContext | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ExportContext
ExportContext
Index
Properties
destPath
options
userData
Properties
destPath
destPath: string
options
options: ExportOptions
OptionaluserData
userData: any
You can attach your own custom data using this property - it will then be passed to each event handler, allowing you to keep state from one event to the next.
ExportContext
destPath
options
userData
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/exportmodule.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.56
Truncated: False
Content-Mode: simple
Content:
ExportModule | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ExportModule
ExportModule
Used to implement a module to export data from Joplin.View the demo pluginfor an example.
In general, all the event handlers youll need to implement take acontextobject as a first argument. This object will contain the export or import path as well as various optional properties, such as which notes or notebooks need to be exported.
To get a better sense of what it will contain it can be useful to print it usingconsole.info(context).
Index
Properties
description
fileExtensions
format
isNoteArchive
target
Methods
onClose
onInit
onProcessItem
onProcessResource
Properties
description
description: string
The description that will appear in the UI, for example in the menu item.
OptionalfileExtensions
fileExtensions: string[]
The extensions of the files exported by your module. For example, it is[htm,html]for the HTML module, and just[jex]for the JEX module.
format
format: string
The format to be exported, egenex,jex,json, etc.
isNoteArchive
isNoteArchive: boolean
Only applies to single file exporters or importers It tells whether the format can package multiple notes into one file. For example JEX or ENEX can, but HTML cannot.
target
target: FileSystemItem
Whether the module will export a single file or multiple files in a directory. It affects the open dialog that will be presented to the user when using your exporter.
Methods
onClose
onClose(context:ExportContext):Promisevoid
Called when the export process is done.
Parameters
context:ExportContext
onInit
onInit(context:ExportContext):Promisevoid
Called when the export process starts.
Parameters
context:ExportContext
onProcessItem
onProcessItem(context:ExportContext, itemType:number, item:any):Promisevoid
Called when an item needs to be processed. Anitemcan be any Joplin object, such as a note, a folder, a notebook, etc.
Parameters
context:ExportContext
itemType:number
item:any
onProcessResource
onProcessResource(context:ExportContext, resource:any, filePath:string):Promisevoid
Called when a resource file needs to be exported.
Parameters
context:ExportContext
resource:any
filePath:string
ExportModule
description
fileExtensions
format
isNoteArchive
target
onClose
onInit
onProcessItem
onProcessResource
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/exportoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.464
Truncated: False
Content-Mode: simple
Content:
ExportOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ExportOptions
ExportOptions
Index
Properties
format
path
sourceFolderIds
sourceNoteIds
target
Properties
Optionalformat
format: string
Optionalpath
path: string
OptionalsourceFolderIds
sourceFolderIds: string[]
OptionalsourceNoteIds
sourceNoteIds: string[]
Optionaltarget
target: FileSystemItem
ExportOptions
format
path
sourceFolderIds
sourceNoteIds
target
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/image.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.447
Truncated: False
Content-Mode: simple
Content:
Image | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Image
Image
Index
Properties
data
handle
Properties
data
data: any
handle
handle: Handle
Image
data
handle
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/implementation.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.5
Truncated: False
Content-Mode: simple
Content:
Implementation | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Implementation
Implementation
Index
Properties
createFromPath
createFromPdf
getPdfInfo
Properties
createFromPath
createFromPath: (path:string)= Promiseunknown
Type declaration
(path:string):Promiseunknown
Parameters
path:string
createFromPdf
createFromPdf: (path:string, options:CreateFromPdfOptions)= Promiseunknown[]
Type declaration
(path:string, options:CreateFromPdfOptions):Promiseunknown[]
Parameters
path:string
options:CreateFromPdfOptions
getPdfInfo
getPdfInfo: (path:string)= PromisePdfInfo
Type declaration
(path:string):PromisePdfInfo
Parameters
path:string
Implementation
createFromPath
createFromPdf
getPdfInfo
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/importcontext.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.446
Truncated: False
Content-Mode: simple
Content:
ImportContext | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ImportContext
ImportContext
Index
Properties
options
sourcePath
warnings
Properties
options
options: any
sourcePath
sourcePath: string
warnings
warnings: string[]
ImportContext
options
sourcePath
warnings
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/importmodule.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.497
Truncated: False
Content-Mode: simple
Content:
ImportModule | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ImportModule
ImportModule
Index
Properties
description
fileExtensions
format
isNoteArchive
outputFormat
sources
Methods
onExec
Properties
description
description: string
The description that will appear in the UI, for example in the menu item.
OptionalfileExtensions
fileExtensions: string[]
Tells the file extensions of the exported files.
format
format: string
The format to be exported, egenex,jex,json, etc.
isNoteArchive
isNoteArchive: boolean
Only applies to single file exporters or importers It tells whether the format can package multiple notes into one file. For example JEX or ENEX can, but HTML cannot.
OptionaloutputFormat
outputFormat: ImportModuleOutputFormat
Tells the type of notes that will be generated, either HTML or Markdown (default).
sources
sources: FileSystemItem[]
The type of sources that are supported by the module. Tells whether the module can import files or directories or both.
Methods
onExec
onExec(context:ImportContext):Promisevoid
Called when the import process starts. There is only one event handler within which you should import the complete data.
Parameters
context:ImportContext
ImportModule
description
fileExtensions
format
isNoteArchive
outputFormat
sources
onExec
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/itemchangeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.457
Truncated: False
Content-Mode: simple
Content:
ItemChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ItemChangeEvent
ItemChangeEvent
Index
Properties
event
id
Properties
event
event: ItemChangeEventType
id
id: string
ItemChangeEvent
event
id
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/listrenderer.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.605
Truncated: False
Content-Mode: simple
Content:
ListRenderer | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ListRenderer
ListRenderer
Index
Properties
dependencies
flow
headerHeight
headerTemplate
id
itemCss
itemSize
itemTemplate
itemValueTemplates
label
multiColumns
onChange
onHeaderClick
onRenderNote
Properties
Optionaldependencies
dependencies: ListRendererDependency[]
List the dependencies that your plugin needs to render the note list items. Only these will be passed to youronRenderNotehandler. Ensure that you do not add more than what you need since there is a performance penalty for each property.
flow
flow: ItemFlow
Can be top to bottom or left to right. Left to right gives you more option to set the size of the items since you set both its width and height.
OptionalheaderHeight
headerHeight: number
OptionalheaderTemplate
headerTemplate: string
id
id: string
It must be unique to your plugin.
OptionalitemCss
itemCss: string
The CSS is relative to the list item container. What will appear in the page is essentially.note-list-item { YOUR_CSS; }. It means you can use child combinator with guarantee it will only apply to your own items. In this example, the styling will apply to.note-list-item.content:
.content{padding:10px; }
In order to get syntax highlighting working here, its recommended installing an editor extension such ases6-string-html VSCode extension
itemSize
itemSize: Size
The size of each item must be specified in advance for performance reasons, and cannot be changed afterwards. If the item flow is top to bottom, you only need to specify the item height (the width will be ignored).
itemTemplate
itemTemplate: string
This property is set differently depending on themultiColumnsproperty.
IfmultiColumnsisfalse
There is only one column and the template is used to render the entire row.
This is the HTML template that will be used to render the note list item. This is aMustache templateand it will receive the variable you return fromonRenderNoteas tags. For example, if you return a property namedformattedDatefromonRenderNote, you can insert it in the template usingCreated date: {{formattedDate}}
IfmultiColumnsistrue
Since there is multiple columns, this template will be used to render each note property within the row. For example if the current columns are the Updated and Title properties, this template will be called once to render the updated time and a second time to render the title. To display the current property, the genericvalueproperty is provided - it will be replaced at runtime by the actual note property. To render something different depending on the note property, useitemValueTemplate. A minimal example would bespan{{value}}/spanwhich will simply render the current property inside a span tag.
In order to get syntax highlighting working here, its recommended installing an editor extension such ases6-string-html VSCode extension
Default property rendering
Certain properties are automatically rendered once inserted in the Mustache template. Those are in particular all the date-related fields, such asnote.user_updated_timeornote.todo_completed. Internally, those are timestamps in milliseconds, however when rendered we display them as date/time strings using the users preferred time format. Another notable auto-rendered property isnote.titlewhich is going to include additional HTML, such as the search markers.
If you do not want this default rendering behaviour, for example if you want to display the raw timestamps in milliseconds, you can simply return custom properties fromonRenderNote(). For example:
onRenderNote:async(props:any) ={return{ ...props,// Return the property under a different name updatedTimeMs: props.note.user_updated_time, } },itemTemplate:// html `divRaw timestamp: {{updatedTimeMs}}!-- This is **not** auto-rendered -Formatted time: {{note.user_updated_time}}!-- This is -- /div`,
See[https://github.com/laurent22/joplin/blob/dev/packages/lib/services/noteList/renderViewProps.ts](renderViewProps.ts)for the list of properties that have a default rendering.
OptionalitemValueTemplates
itemValueTemplates: ListRendererItemValueTemplates
This property applies only whenmultiColumnsistrue. It is used to render something different for each note property.
This is a map of actual dependencies to templates - you only need to return something if the default, as specified intemplate, is not enough.
Again you need to return a Mustache template and it will be combined with thetemplateproperty to create the final template. For example if you return a property namedformattedDatefromonRenderNote, you can insert it in the template using{{formattedDate}}. This string will replace{{value}}in thetemplateproperty.
So if the template property is set tospan{{value}}/span, the final template will bespan{{formattedDate}}/span.
The property would be set as so:
itemValueTemplates: {note.user_updated_time:{{formattedDate}}, }
label
label: ()= Promisestring
This user-facing text is used for example in the View menu, so that your renderer can be selected.
Type declaration
():Promisestring
OptionalmultiColumns
multiColumns: boolean
Whether the renderer supports multiple columns. Applies only whenflowistopToBottom. Defaults tofalse.
OptionalonChange
onChange: OnChangeHandler
This handler allows adding some interactivity to the note renderer - whenever an input element within the item is changed (for example, when a checkbox is clicked, or a text input is changed), thisonChangehandler is going to be called.
You can inspectevent.elementIdto know which element had some changes, andevent.valueto know the new value.event.noteIdalso tells you what note is affected, so that you can potentially apply changes to it.
You specify the element ID, by setting adata-idattribute on the input.
For example, if you have such a template:
div input type=text value={{note.title}} data-id=noteTitleInput/ /div
The event handler will receive an event withelementIdset tonoteTitleInput.
Default event handlers
Currently one click event is automatically handled:
If there is a checkbox with adata-id=todo-checkboxattribute is present, it is going to automatically toggle the note to-docompletedstatus.
For example this is what is used in the default list renderer:
input data-id=todo-checkboxtype=checkbox{{#note.todo_completed}}checked=checked{{/note.todo_completed}}
OptionalonHeaderClick
onHeaderClick: OnClickHandler
onRenderNote
onRenderNote: OnRenderNoteHandler
This is where most of the real-time processing will happen. When a note is rendered for the first time and every time it changes, this handler receives the properties specified in thedependenciesproperty. You can then process them, load any additional data you need, and once done you need to return the properties that are needed in theitemTemplateHTML. Again, to use the formatted date example, you could have such a renderer:
dependencies: [note.title,note.created_time, ],itemTemplate:// html `divTitle: {{note.title}}br/Date: {{formattedDate}}/div`,onRenderNote:async(props:any) ={constformattedDate = dayjs(props.note.created_time).format();return{// Also return the props, so that note.title is available from the // template...props, formattedDate, } },
ListRenderer
dependencies
flow
headerHeight
headerTemplate
id
itemCss
itemSize
itemTemplate
itemValueTemplates
label
multiColumns
onChange
onHeaderClick
onRenderNote
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/markdowneditorcontentscriptmodule.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.454
Truncated: False
Content-Mode: simple
Content:
MarkdownEditorContentScriptModule | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
MarkdownEditorContentScriptModule
MarkdownEditorContentScriptModule
Index
Properties
plugin
Properties
plugin
plugin: (editorControl:CodeMirrorControl)= void
Type declaration
(editorControl:CodeMirrorControl):void
Parameters
editorControl:CodeMirrorControl
MarkdownEditorContentScriptModule
plugin
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/markdownitcontentscriptmodule.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.462
Truncated: False
Content-Mode: simple
Content:
MarkdownItContentScriptModule | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
MarkdownItContentScriptModule
MarkdownItContentScriptModule
Index
Properties
plugin
Properties
plugin
plugin: (markdownIt:any, options:any)= any
Type declaration
(markdownIt:any, options:any):any
Parameters
markdownIt:any
options:any
MarkdownItContentScriptModule
plugin
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/menuitem.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.491
Truncated: False
Content-Mode: simple
Content:
MenuItem | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
MenuItem
MenuItem
Index
Properties
accelerator
commandArgs
commandName
label
submenu
type
Properties
Optionalaccelerator
accelerator: string
Accelerator associated with the menu item
OptionalcommandArgs
commandArgs: any[]
Arguments that should be passed to the command. They will be as rest parameters.
OptionalcommandName
commandName: string
Command that should be associated with the menu item. All menu item should have a command associated with them unless they are a sub-menu.
Optionallabel
label: string
Menu item label. If not specified, the command label will be used instead.
Optionalsubmenu
submenu: MenuItem[]
Menu items that should appear below this menu item. Allows creating a menu tree.
Optionaltype
type: "normal"|"separator"|"submenu"|"checkbox"|"radio"
Set toseparatorto create a divider line
MenuItem
accelerator
commandArgs
commandName
label
submenu
type
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/menutemplateitem.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.443
Truncated: False
Content-Mode: simple
Content:
MenuTemplateItem | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
MenuTemplateItem
MenuTemplateItem
Index
Properties
command
commandArgs
label
Properties
Optionalcommand
command: string
OptionalcommandArgs
commandArgs: CommandArgument[]
Optionallabel
label: string
MenuTemplateItem
command
commandArgs
label
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/notealarmtriggerevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.548
Truncated: False
Content-Mode: simple
Content:
NoteAlarmTriggerEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
NoteAlarmTriggerEvent
NoteAlarmTriggerEvent
Index
Properties
noteId
Properties
noteId
noteId: string
NoteAlarmTriggerEvent
noteId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/notecontentchangeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.339
Truncated: False
Content-Mode: simple
Content:
NoteContentChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
NoteContentChangeEvent
NoteContentChangeEvent
Index
Properties
note
Properties
note
note: any
NoteContentChangeEvent
note
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/notelistcolumn.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.337
Truncated: False
Content-Mode: simple
Content:
NoteListColumn | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
NoteListColumn
NoteListColumn
Index
Properties
name
width
Properties
name
name: ColumnName
width
width: number
NoteListColumn
name
width
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/noteselectionchangeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.439
Truncated: False
Content-Mode: simple
Content:
NoteSelectionChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
NoteSelectionChangeEvent
NoteSelectionChangeEvent
Index
Properties
value
Properties
value
value: string[]
NoteSelectionChangeEvent
value
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/onchangeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.456
Truncated: False
Content-Mode: simple
Content:
OnChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
OnChangeEvent
OnChangeEvent
Index
Properties
elementId
noteId
value
Properties
elementId
elementId: string
noteId
noteId: string
value
value: any
OnChangeEvent
elementId
noteId
value
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/onclickevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.444
Truncated: False
Content-Mode: simple
Content:
OnClickEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
OnClickEvent
OnClickEvent
Index
Properties
elementId
Properties
elementId
elementId: string
OnClickEvent
elementId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/pdfinfo.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.449
Truncated: False
Content-Mode: simple
Content:
PdfInfo | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
PdfInfo
PdfInfo
Index
Properties
pageCount
Properties
pageCount
pageCount: number
PdfInfo
pageCount
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/rectangle.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.499
Truncated: False
Content-Mode: simple
Content:
Rectangle | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Rectangle
Rectangle
Index
Properties
height
width
x
y
Properties
Optionalheight
height: number
Optionalwidth
width: number
Optionalx
x: number
Optionaly
y: number
Rectangle
height
width
x
y
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/resizeoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.335
Truncated: False
Content-Mode: simple
Content:
ResizeOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ResizeOptions
ResizeOptions
Index
Properties
height
quality
width
Properties
Optionalheight
height: number
Optionalquality
quality: "good"|"better"|"best"
Optionalwidth
width: number
ResizeOptions
height
quality
width
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/resourcechangeevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
ResourceChangeEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
ResourceChangeEvent
ResourceChangeEvent
Index
Properties
id
Properties
id
id: string
ResourceChangeEvent
id
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/savenoteoptions.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.454
Truncated: False
Content-Mode: simple
Content:
SaveNoteOptions | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SaveNoteOptions
SaveNoteOptions
Index
Properties
body
noteId
Properties
body
body: string
The notes new content.
noteId
noteId: string
The ID of the note to save. This should match either:
The ID of the note currently being edited
The ID of a note that was very recently open in the editor.
This property is present to ensure that the note editor doesnt write to the wrong note just after switching notes.
SaveNoteOptions
body
noteId
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/script.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.449
Truncated: False
Content-Mode: simple
Content:
Script | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Script
Script
Index
Methods
onStart
Methods
OptionalonStart
onStart(event:any):Promisevoid
Parameters
event:any
Script
onStart
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/settingitem.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.579
Truncated: False
Content-Mode: simple
Content:
SettingItem | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SettingItem
SettingItem
Index
Properties
advanced
appTypes
description
isEnum
label
maximum
minimum
options
public
section
secure
step
storage
subType
type
value
Properties
Optionaladvanced
advanced: boolean
An advanced setting will be moved under theAdvancedbutton in the config screen.
OptionalappTypes
appTypes: AppType[]
Reserved property. Not used at the moment.
Optionaldescription
description: string
OptionalisEnum
isEnum: boolean
To create a setting with multiple options, set this property totrue. That setting will render as a dropdown list in the configuration screen.
label
label: string
Optionalmaximum
maximum: number
Optionalminimum
minimum: number
Set the min, max and step values if you want to restrict an int setting to a particular range.
Optionaloptions
options: Recordany,any
This property is required whenisEnumistrue. In which case, it should contain a map of value =label.
public
public: boolean
A public setting will appear in the Configuration screen and will be modifiable by the user. A private setting however will not appear there, and can only be changed programmatically. You may use this to store some values that you do not want to directly expose.
Optionalsection
section: string
You would usually set this to a section you would have created specifically for the plugin.
Optionalsecure
secure: boolean
Set this totrueto store secure data, such as passwords. Any such setting will be stored in the system keychain if one is available.
Optionalstep
step: number
Optionalstorage
storage: SettingStorage
Either store the setting in the database or in settings.json. Defaults to database.
OptionalsubType
subType: SettingItemSubType
Currently only used to display a file or directory selector. Always settypetoSettingItemType.Stringwhen using this property.
type
type: SettingItemType
value
value: any
SettingItem
advanced
appTypes
description
isEnum
label
maximum
minimum
options
public
section
secure
step
storage
subType
type
value
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/settingsection.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
SettingSection | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SettingSection
SettingSection
Index
Properties
description
iconName
label
name
Properties
Optionaldescription
description: string
OptionaliconName
iconName: string
label
label: string
Optionalname
name: string
SettingSection
description
iconName
label
name
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/size.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.453
Truncated: False
Content-Mode: simple
Content:
Size | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Size
Size
Index
Properties
height
width
Properties
Optionalheight
height: number
Optionalwidth
width: number
Size
height
width
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/synccompleteevent.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.45
Truncated: False
Content-Mode: simple
Content:
SyncCompleteEvent | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
SyncCompleteEvent
SyncCompleteEvent
Index
Properties
withErrors
Properties
withErrors
withErrors: boolean
SyncCompleteEvent
withErrors
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/toast.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.606
Truncated: False
Content-Mode: simple
Content:
Toast | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Toast
Toast
Index
Properties
duration
message
timestamp
type
Properties
Optionalduration
duration: number
message
message: string
Optionaltimestamp
timestamp: number
Optionaltype
type: ToastType
Toast
duration
message
timestamp
type
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/versioninfo.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.478
Truncated: False
Content-Mode: simple
Content:
VersionInfo | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
VersionInfo
VersionInfo
Index
Properties
platform
profileVersion
syncVersion
version
Properties
platform
platform: "desktop"|"mobile"
profileVersion
profileVersion: number
syncVersion
syncVersion: number
version
version: string
VersionInfo
platform
profileVersion
syncVersion
version
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/interfaces/webviewapi.html
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.371
Truncated: False
Content-Mode: simple
Content:
WebviewApi | Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
WebviewApi
WebviewApi
Index
Properties
menuPopupFromTemplate
onMessage
postMessage
Properties
menuPopupFromTemplate
menuPopupFromTemplate: (template:MenuTemplateItem[])= void
Type declaration
(template:MenuTemplateItem[]):void
Parameters
template:MenuTemplateItem[]
onMessage
onMessage: (message:object)= void
Type declaration
(message:object):void
Parameters
message:object
postMessage
postMessage: (message:object)= unknown
Type declaration
(message:object):unknown
Parameters
message:object
WebviewApi
menuPopupFromTemplate
onMessage
postMessage
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#activationcheckcallback
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.669
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#activationcheckslice
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.728
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#buttonid
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.672
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#changehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.9
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#columnname
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.861
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#commandargument
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.683
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#editorcommandcallback
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.669
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#filterhandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.93
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#handle
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.691
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#itemchangehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.778
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#listrendererdatabasedependency
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.724
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#listrendererdependency
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 1.914
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#listrendereritemvaluetemplates
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.877
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#notelistcolumns
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.807
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#onchangehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.798
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#onclickhandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.752
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#onrendernotehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 1.142
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#path
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.829
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#postmessagehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.766
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#rendernoteview
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.939
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#resourcechangehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.67
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#syncstarthandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.935
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#updatecallback
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.769
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#viewhandle
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 2.071
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#visiblehandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.799
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#workspaceeventhandler
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.684
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#defaultlistcolumns
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.683
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#getresourcepath
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 0.765
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
--------------------------------------------------------------------------------
URL: https://joplinapp.org/api/references/plugin_api/globals.html#iscontextmenuitemlocation
Status: 200
Content-Type: text/html; charset=utf-8
Elapsed seconds: 1.222
Truncated: False
Content-Mode: simple
Content:
Joplin Plugin API Documentation
Search
Preparing search index...
The search index is not available
Joplin Plugin API Documentation
Options
All
Public
Public/Protected
All
Inherited
Menu
Joplin Plugin API Documentation
Index
Enumerations
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
Classes
Joplin
JoplinClipboard
JoplinCommands
JoplinContentScripts
JoplinData
JoplinImaging
JoplinInterop
JoplinPlugins
JoplinSettings
JoplinViews
JoplinViewsDialogs
JoplinViewsEditors
JoplinViewsMenuItems
JoplinViewsMenus
JoplinViewsNoteList
JoplinViewsPanels
JoplinViewsToolbarButtons
JoplinWindow
JoplinWorkspace
Interfaces
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
Type aliases
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
Variables
columnNames
defaultWidth
logger
registerSettingAllowedPluginIds
Functions
defaultListColumns
getResourcePath
isContextMenuItemLocation
Type aliases
ActivationCheckCallback
ActivationCheckCallback: (event:ActivationCheckEvent)= Promiseboolean
Type declaration
(event:ActivationCheckEvent):Promiseboolean
Parameters
event:ActivationCheckEvent
ActivationCheckSlice
ActivationCheckSlice: PickEditorActivationCheckFilterObject,"effectiveNoteId"|"windowId"|"activatedEditors"
ButtonId
ButtonId: string
ChangeHandler
ChangeHandler: (event:ChangeEvent)= void
Type declaration
(event:ChangeEvent):void
Parameters
event:ChangeEvent
ColumnName
ColumnName: typeofcolumnNames[number]
CommandArgument
CommandArgument: string|number|object|boolean|null
EditorCommandCallback
EditorCommandCallback: (...args:any[])= any
Type declaration
(...args:any[]):any
Parameters
Rest ...args:any[]
FilterHandler
FilterHandlerT: (object:T)= PromiseT
Type parameters
T
Type declaration
(object:T):PromiseT
Parameters
object:T
Handle
Handle: string
ItemChangeHandler
ItemChangeHandler: WorkspaceEventHandlerItemChangeEvent
ListRendererDatabaseDependency
ListRendererDatabaseDependency: "folder.created_time"|"folder.deleted_time"|"folder.encryption_applied"|"folder.encryption_cipher_text"|"folder.icon"|"folder.id"|"folder.is_shared"|"folder.master_key_id"|"folder.parent_id"|"folder.share_id"|"folder.title"|"folder.updated_time"|"folder.user_created_time"|"folder.user_data"|"folder.user_updated_time"|"folder.type_"|"note.altitude"|"note.application_data"|"note.author"|"note.body"|"note.conflict_original_id"|"note.created_time"|"note.deleted_time"|"note.encryption_applied"|"note.encryption_cipher_text"|"note.id"|"note.is_conflict"|"note.is_shared"|"note.is_todo"|"note.latitude"|"note.longitude"|"note.markup_language"|"note.master_key_id"|"note.order"|"note.parent_id"|"note.share_id"|"note.source"|"note.source_application"|"note.source_url"|"note.title"|"note.todo_completed"|"note.todo_due"|"note.updated_time"|"note.user_created_time"|"note.user_data"|"note.user_updated_time"|"note.type_"
ListRendererDependency
ListRendererDependency: ListRendererDatabaseDependency|"item.index"|"item.selected"|"item.size.height"|"item.size.width"|"note.folder.title"|"note.isWatched"|"note.tags"|"note.todoStatusText"|"note.titleHtml"
Most of these are the built-in note properties, such asnote.title,note.todo_completed, etc. complemented with special properties such asnote.isWatched, to know if a note is currently opened in the external editor, andnote.tagsto get the list tags associated with the note.
Thenote.todoStatusTextproperty is a localised description of the to-do status (e.g.to-do, incomplete). If you include aninput type=checkbox... /for to-do items that would otherwise be unlabelled, consider addingnote.todoStatusTextas the checkboxsaria-label.
Item properties
Theitem.*properties are specific to the rendered item. The most important beingitem.selected, which you can use to display the selected note in a different way.
ListRendererItemValueTemplates
ListRendererItemValueTemplates: Recordstring,string
NoteListColumns
NoteListColumns: NoteListColumn[]
OnChangeHandler
OnChangeHandler: (event:OnChangeEvent)= Promisevoid
Type declaration
(event:OnChangeEvent):Promisevoid
Parameters
event:OnChangeEvent
OnClickHandler
OnClickHandler: (event:OnClickEvent)= Promisevoid
Type declaration
(event:OnClickEvent):Promisevoid
Parameters
event:OnClickEvent
OnRenderNoteHandler
OnRenderNoteHandler: (props:any)= PromiseRenderNoteView
Type declaration
(props:any):PromiseRenderNoteView
Parameters
props:any
Path
Path: string[]
An array of at least one element and at most three elements.
[0]: Resource name (eg.notes,folders,tags, etc.)
[1]: (Optional) Resource ID.
[2]: (Optional) Resource link.
PostMessageHandler
PostMessageHandler: (message:any)= Promiseany
Type declaration
(message:any):Promiseany
Parameters
message:any
RenderNoteView
RenderNoteView: Recordstring,any
ResourceChangeHandler
ResourceChangeHandler: WorkspaceEventHandlerResourceChangeEvent
SyncStartHandler
SyncStartHandler: ()= void
Type declaration
():void
UpdateCallback
UpdateCallback: (event:EditorUpdateEvent)= Promisevoid
Type declaration
(event:EditorUpdateEvent):Promisevoid
Parameters
event:EditorUpdateEvent
ViewHandle
ViewHandle: string
VisibleHandler
VisibleHandler: ()= Promisevoid
Type declaration
():Promisevoid
WorkspaceEventHandler
WorkspaceEventHandlerEventType: (event:EventType)= void
Type parameters
EventType
Type declaration
(event:EventType):void
Parameters
event:EventType
Variables
ConstcolumnNames
columnNames: ["note.folder.title","note.is_todo","note.latitude","note.longitude","note.source_url","note.tags","note.title","note.todo_completed","note.todo_due","note.user_created_time","note.user_updated_time"]= [note.folder.title,note.is_todo,note.latitude,note.longitude,note.source_url,note.tags,note.title,note.todo_completed,note.todo_due,note.user_created_time,note.user_updated_time,] as const
ConstdefaultWidth
defaultWidth: 100= 100
Constlogger
logger: LoggerWrapper= Logger.create(joplin.plugins)
ConstregisterSettingAllowedPluginIds
registerSettingAllowedPluginIds: string[]= [b53da1f6-868c-468d-b60c-2897a27166ac,com.andrejilderda.macOSTheme,com.export-to-ssg.aman-d-1-n-only,com.github.BeatLink.joplin-plugin-untagged,com.github.joplin.kanban,com.github.marc0l92.joplin-plugin-jira-issue,com.github.uphy.PlantUmlPlugin,com.gitlab.BeatLink.joplin-plugin-repeating-todos,com.joplin_plugin.nlr,com.lki.homenote,com.plugin.randomNotePlugin,com.shantanugoel.JoplinCMLineNumbersPlugin,com.whatever.inline-tags,com.whatever.quick-links,com.xUser5000.bibtex,cx.evermeet.tessus.menu-shortcut-toolbar,fd117a99-b165-4824-893c-5825439a842d,io.github.jackgruber.backup,io.github.jackgruber.combine-notes,io.github.jackgruber.copytags,io.github.jackgruber.hotfolder,io.github.jackgruber.note-overview,io.treymo.LinkGraph,joplin-insert-date,joplin-plugin-conflict-resolution,joplin.plugin.ambrt.backlinksToNote,joplin.plugin.ambrt.convertToNewNote,joplin.plugin.ambrt.copyNoteLink,joplin.plugin.ambrt.embedSearch,joplin.plugin.ambrt.fold-cm,joplin.plugin.ambrt.goToItem,joplin.plugin.anki-sync,joplin.plugin.benji.favorites,joplin.plugin.benji.persistentLayout,joplin.plugin.benji.quick-move,joplin.plugin.forcewake.tags-generator,joplin.plugin.note.tabs,joplin.plugin.quick.html.tags,joplin.plugin.spoiler.cards,joplin.plugin.templates,net.rmusin.joplin-table-formatter,net.rmusin.resource-search,org.joplinapp.plugins.AbcSheetMusic,org.joplinapp.plugins.admonition,org.joplinapp.plugins.ToggleSidebars,osw.joplin.markdowncalc,outline,plugin.azamahJunior.note-statistics,plugin.calebjohn.MathMode,plugin.calebjohn.rich-markdown,]
Functions
ConstdefaultListColumns
defaultListColumns():NoteListColumn[]
ConstgetResourcePath
getResourcePath(resourceId:string):Promisestring
Parameters
resourceId:string
isContextMenuItemLocation
isContextMenuItemLocation(location:MenuItemLocation):boolean
Parameters
location:MenuItemLocation
AppType
ContentScriptType
FileSystemItem
ImportModuleOutputFormat
ItemChangeEventType
ItemFlow
MenuItemLocation
ModelType
SettingItemSubType
SettingItemType
SettingStorage
ToastType
ToolbarButtonLocation
joplin
joplin.clipboard
joplin.commands
joplin.contentScripts
joplin.data
joplin.imaging
joplin.interop
joplin.plugins
joplin.settings
joplin.views
joplin.views.dialogs
joplin.views.editors
joplin.views.menuItems
joplin.views.menus
joplin.views.noteList
joplin.views.panels
joplin.views.toolbarButtons
joplin.window
joplin.workspace
ActivationCheckEvent
ButtonSpec
ChangeEvent
ClipboardContent
CodeMirrorControl
Command
ContentScriptContext
ContentScriptModule
ContentScriptModuleLoadedEvent
CreateFromBufferOptions
CreateFromPdfOptions
CreateMenuItemOptions
DialogResult
Disposable
EditContextMenuFilterObject
EditorActivationCheckFilterObject
EditorCommand
EditorPluginCallbacks
EditorUpdateEvent
ExportContext
ExportModule
ExportOptions
Image
Implementation
ImportContext
ImportModule
ItemChangeEvent
ListRenderer
MarkdownEditorContentScriptModule
MarkdownItContentScriptModule
MenuItem
MenuTemplateItem
NoteAlarmTriggerEvent
NoteContentChangeEvent
NoteListColumn
NoteSelectionChangeEvent
OnChangeEvent
OnClickEvent
PdfInfo
Rectangle
ResizeOptions
ResourceChangeEvent
SaveNoteOptions
Script
SettingItem
SettingSection
Size
SyncCompleteEvent
Toast
VersionInfo
WebviewApi
ActivationCheckCallback
ActivationCheckSlice
ButtonId
ChangeHandler
ColumnName
CommandArgument
EditorCommandCallback
FilterHandler
Handle
ItemChangeHandler
ListRendererDatabaseDependency
ListRendererDependency
ListRendererItemValueTemplates
NoteListColumns
OnChangeHandler
OnClickHandler
OnRenderNoteHandler
Path
PostMessageHandler
RenderNoteView
ResourceChangeHandler
SyncStartHandler
UpdateCallback
ViewHandle
VisibleHandler
WorkspaceEventHandler
defaultListColumns
getResourcePath
isContextMenuItemLocation
